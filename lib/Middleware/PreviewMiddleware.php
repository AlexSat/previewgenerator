<?php

namespace OCA\PreviewGenerator\Middleware;

use OC\Core\Controller\PreviewController;
use OC\OCS\Exception;
use OCA\PreviewGenerator\Exceptions\ThresholdForPreviewGenerationQueueReachedException;
use OCP\AppFramework\Http\NotFoundResponse;
use OCP\AppFramework\Http\Response;
use OCP\Files\Folder;
use OCP\IDBConnection;
use OCP\AppFramework\Middleware;
use OCP\IRequest;

class PreviewMiddleware extends Middleware {

    /** @var IDBConnection */
    private $connection;

    private $rawId;
    private $toBeGenerated = false;

    public function __construct(IDBConnection $connection) {
        $this->connection = $connection;
    }

    public function afterException($controller, $methodName, \Exception $exception) {
        if ($exception instanceof ThresholdForPreviewGenerationQueueReachedException) {
            // There is so many (more than threshold) previews requested to generate, so return 404. User must to wait for scheduled generating
            return new NotFoundResponse();
        }
    }

    public function afterController($controller, $methodName, Response $response)
    {
        if ($this->toBeGenerated
            && $controller instanceof PreviewController
            && $response->getStatus() === 200
        ) {
            // If it is response for generated by default previewGenerator preview, we delete this file from queue to generate preview
            $qb = $this->connection->getQueryBuilder();
            $qb->delete('preview_generation')
                ->where($qb->expr()->eq('id', $qb->createNamedParameter($this->rawId)));
            $qb->execute();
        }
        return $response;
    }

    public function beforeController($controller, $methodName)
    {
        if ($controller instanceof PreviewController) {
            $config = \OC::$server->getConfig();

            if(!$this->TryGetParametersFromRequest($methodName, $fileId, $userId))
            {
                return;
            }

            // Check that $fileId in order to be generated by plugin
            if ($this->isFileRegisteredForPreviewGenerateByPlugin($fileId, $userId, $rawId)) {
                $totalQueuedPreviews = $this->getTotalQueuedFilesToBeGeneratedByPlugin();
                $threshold = $config->getSystemValueInt('queued_previews_threshold', 5);
                if ($totalQueuedPreviews <= $threshold)
                {
                    // Just return in case of so small amount of queued previews
                    $this->toBeGenerated = true;
                    $this->rawId = $rawId;
                    return;
                }
                // There is so many queued previews, so just say 'not found' for this preview
                throw new ThresholdForPreviewGenerationQueueReachedException();
            }
        }
    }

    protected function isFileRegisteredForPreviewGenerateByPlugin($fileId, $userId, &$rawId) : bool
    {
        $qb = $this->connection->getQueryBuilder();
        $qb->select('id')
            ->from('preview_generation')
            ->where(
                $qb->expr()->andX(
                    $qb->expr()->eq('uid', $qb->createNamedParameter($userId)),
                    $qb->expr()->eq('file_id', $qb->createNamedParameter($fileId))
                )
            )->setMaxResults(1);
        $cursor = $qb->execute();
        $fetched = $cursor->fetch();
        $inTable = $fetched !== false;
        if ($inTable)
            // Store raw id in for future deletion from generating queue
            $rawId = $fetched['id'];
        $cursor->closeCursor();

        // $fileId is in queue to generate preview (raw exists in plugin database table)
        return $inTable;
    }

    protected function TryGetFileIdFromRequest(string $methodName, Folder $userFolder, IRequest $request, &$fileId): bool
    {
        try{
            if ($methodName === 'getPreview') {
                $fileId = $userFolder->get($request->getParam('file'))->getId();
            } elseif ($methodName === 'getPreviewByFileId') {
                $fileId = $request->getParam('fileId');
            }
            return true;
        } catch (Exception $ex)
        {
            return false;
        }
    }

    protected function getTotalQueuedFilesToBeGeneratedByPlugin() : int
    {
        $qb = $this->connection->getQueryBuilder();
        $qb->select($qb->func()->count('', 'total'))
            ->from('preview_generation');
        $cursor = $qb->execute();
        $fetched = $cursor->fetch();
        $total = $fetched['total'];
        $cursor->closeCursor();
        return $total;
    }

    protected function TryGetParametersFromRequest($methodName, &$fileId, &$userId): bool
    {
        try {
            $root = \OC::$server->getRootFolder();
            $userId = \OC::$server->getUserSession()->getUser()->getUID();
            $request = \OC::$server->getRequest();
            $userFolder = $root->getUserFolder($userId);
            $userManager = \OC::$server->getUserManager();
            if (!$userManager->userExists($userId) || !$this->TryGetFileIdFromRequest($methodName, $userFolder, $request, $fileId))
            {
                // It is not case for us. Just return processing.
                return false;
            }
            return true;
        } catch (Exception $ex)
        {
            return false;
        }
    }
}